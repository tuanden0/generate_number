// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package numv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NumberServiceClient is the client API for NumberService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NumberServiceClient interface {
	Ping(ctx context.Context, in *NumberServicePingRequest, opts ...grpc.CallOption) (*NumberServicePingResponse, error)
	Get(ctx context.Context, in *NumberServiceGetRequest, opts ...grpc.CallOption) (*NumberServiceGetResponse, error)
}

type numberServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNumberServiceClient(cc grpc.ClientConnInterface) NumberServiceClient {
	return &numberServiceClient{cc}
}

func (c *numberServiceClient) Ping(ctx context.Context, in *NumberServicePingRequest, opts ...grpc.CallOption) (*NumberServicePingResponse, error) {
	out := new(NumberServicePingResponse)
	err := c.cc.Invoke(ctx, "/num.v1.NumberService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *numberServiceClient) Get(ctx context.Context, in *NumberServiceGetRequest, opts ...grpc.CallOption) (*NumberServiceGetResponse, error) {
	out := new(NumberServiceGetResponse)
	err := c.cc.Invoke(ctx, "/num.v1.NumberService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NumberServiceServer is the server API for NumberService service.
// All implementations should embed UnimplementedNumberServiceServer
// for forward compatibility
type NumberServiceServer interface {
	Ping(context.Context, *NumberServicePingRequest) (*NumberServicePingResponse, error)
	Get(context.Context, *NumberServiceGetRequest) (*NumberServiceGetResponse, error)
}

// UnimplementedNumberServiceServer should be embedded to have forward compatible implementations.
type UnimplementedNumberServiceServer struct {
}

func (UnimplementedNumberServiceServer) Ping(context.Context, *NumberServicePingRequest) (*NumberServicePingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedNumberServiceServer) Get(context.Context, *NumberServiceGetRequest) (*NumberServiceGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

// UnsafeNumberServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NumberServiceServer will
// result in compilation errors.
type UnsafeNumberServiceServer interface {
	mustEmbedUnimplementedNumberServiceServer()
}

func RegisterNumberServiceServer(s grpc.ServiceRegistrar, srv NumberServiceServer) {
	s.RegisterService(&NumberService_ServiceDesc, srv)
}

func _NumberService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumberServicePingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NumberServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/num.v1.NumberService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NumberServiceServer).Ping(ctx, req.(*NumberServicePingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NumberService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumberServiceGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NumberServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/num.v1.NumberService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NumberServiceServer).Get(ctx, req.(*NumberServiceGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NumberService_ServiceDesc is the grpc.ServiceDesc for NumberService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NumberService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "num.v1.NumberService",
	HandlerType: (*NumberServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _NumberService_Ping_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _NumberService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/number/number.proto",
}
